/* LFInteractive LLC. All Rights Reserved */
class Condition{static New=0;static Good=1;static Used=2;static Refurbished=3;static Broken=4}class DeviceType{static Desktop=0;static Laptop=1;static Tablet=2;static Phone=3;static Server=4;static Printer=5;static Other=6}class OperatingSystem{static Windows=0;static MacOS=1;static Linux=2;static ChromeOS=3;static Android=4;static iOS=5;static Umix=6;static Other=7}class UniqueFields{static All="all";static Make="make";static Location="locations"}class Enums{static All="all";static Condition="condition";static DeviceType="device_types";static OperatingSystem="operating_systems"}class Computer{constructor(t,e,s,a,i,r,o,n,c,m){this.id=0,this.asset_number=t,this.make=e,this.model=s,this.condition=a,this.device_type=i,this.operating_system=r,this.primary_user=o,this.location=n,this.additional_information=c,this.notes=m,this.created_date=new Date,this.modified_date=new Date}static fromJSON(t){try{const e=JSON.parse(t),s=new Computer(e.asset_number,e.make,e.model,e.condition,e.device_type,e.operating_system,e.primary_user,e.location,e.additional_information,e.notes);return s.id=e.id,s.created_date=new Date(e.created_date),s.modified_date=new Date(e.modified_date),s}catch(t){return!1}}static fromObject(t){return t&&Object.assign(new Computer,t)}toDOM(){return $(`\n        <tr>\n            <td class="asset_number">${this.asset_number}</td>\n            <td class="make">${this.make}</td>\n            <td class="model">${this.model}</td>\n            <td class="condition">${Computer.getConditionFromNumber(this.condition)}</td>\n            <td class="device_type">${Computer.getDeviceTypeFromNumber(this.device_type)}</td>\n            <td class="operating_system">${Computer.getOperatingSystemFromNumber(this.operating_system)}</td>\n            <td class="primary_user">${this.primary_user}</td>\n            <td class="location">${this.location}</td>\n            <td class="additional_information">${this.additional_information}</td>\n            <td class="notes">${this.notes}</td>\n            </tr>\n            `)}static getConditionFromNumber(t){let e=computers.enums.conditions;for(const s in e)if(e[s]==t)return s}static getOperatingSystemFromNumber(t){let e=computers.enums.operating_systems;for(const s in e)if(e[s]==t)return s}static getDeviceTypeFromNumber(t){let e=computers.enums.device_types;for(const s in e)if(e[s]==t)return s}}class Computers{computers=[];constructor(){this.baseUrl=`${window.location.pathname}api/db.php`,this.makes=[],this.locations=[],this.computers=[],this.enums={},this.getUnique().then(t=>{this.makes=t.makes,this.locations=t.locations}),this.getEnums().then(t=>{this.enums=t}).then(()=>{this.getComputers().then(t=>{this.computers=t,$(document).trigger("computersLoaded",[this.computers])})})}async getComputers(){return await $.ajax({url:this.baseUrl,method:"GET",dataType:"json",success:t=>{const e=[];for(const s of t)e.push(Computer.fromJSON(s));return e}})}async getComputer(t){return await $.ajax({url:`${this.baseUrl}?id=${t}`,method:"GET",dataType:"json",success:t=>Computer.fromJSON(t),error:()=>!1})}async getComputerCount(){return await $.ajax({url:`${this.baseUrl}?count=true`,method:"GET",dataType:"json",success:t=>t.count})}async searchComputers(t,e=10,s=0,a=!0){return await $.ajax({url:`${this.baseUrl}?search=${t}&limit=${e}&offset=${s}&ascending=${a}`,method:"GET",dataType:"json",success:t=>{const e=[];for(const s of t.computers)e.push(Computer.fromJSON(s));return e}})}async filterComputers(t,e=10,s=0){return await $.ajax({url:`${this.baseUrl}?filter=${JSON.stringify(t)}&limit=${e}&offset=${s}`,method:"GET",dataType:"json",success:t=>{const e=[];for(const s of t.computers)e.push(Computer.fromJSON(s));return e}})}async addComputer(t){return await $.ajax({url:this.baseUrl,method:"POST",data:JSON.stringify(t),contentType:"application/json",dataType:"json",success:t=>Computer.fromJSON(t)})}async updateComputer(t,e){return await $.ajax({url:`${this.baseUrl}?id=${t}`,method:"PUT",data:JSON.stringify(e),contentType:"application/json",dataType:"json",success:t=>Computer.fromJSON(t)})}async deleteComputer(t){return await $.ajax({url:`${this.baseUrl}?id=${t}`,method:"DELETE",dataType:"json",success:()=>!0,error:()=>!1})}async getUnique(t=UniqueFields.All){return await $.ajax({url:`${this.baseUrl}?unique=${t}`,method:"GET",dataType:"json",success:t=>t})}async getEnums(t=Enums.All){return await $.ajax({url:`${this.baseUrl}?enum=${t}`,method:"GET",dataType:"json",success:t=>t})}}